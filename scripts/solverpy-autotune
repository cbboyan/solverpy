#!/usr/bin/env python3

import logging

logger = logging.getLogger(__name__)

def arguments():
   import argparse
   parser = argparse.ArgumentParser()
   parser.add_argument("train", 
      help="Trainig examples file in the SVM format (plain or compressed).") 
   parser.add_argument("test", nargs="?", 
      help="Testing examples file in the SVM format (plain or compressed).") 
   parser.add_argument("--phases", metavar="p", default="l:b:m:r", 
      help="LightGBM arguments to tune. (default: 'l:b:m:r')")
   parser.add_argument("--iters", type=int, metavar="it", default=16, 
      help="Maximal number of trial models to build (default: 16).")
   parser.add_argument("--timeout", type=int, metavar="t", default=None, 
      help="Overall timeout for tuning in seconds (default: unlimited).")
   parser.add_argument("--min_leaves", type=int, metavar="min", default=16,
      help="Minimal number of leaves for the leaves trial phase `l` (default: 16)."),
   parser.add_argument("--max_leaves", type=int, metavar="max", default=2048,
      help="Maximal number of leaves for the leaves trial phase `l` (default: 2048)."),
   args = parser.parse_args()
   args.test = args.test or args.train
   return args

def main(args):
   import json
   from solverpy.builder import autotune
   from solverpy.tools import human

   best = autotune.prettytuner(
      f_train=args.train, 
      f_test=args.test,
      phases=args.phases,
      timeout=args.timeout,
      iters=args.iters,
      min_leaves=args.min_leaves,
      max_leaves=args.max_leaves,
   )

   print(
      f"Best model score: {best[0]}\n" 
      f"Best model accuracy: {human.humanacc(best[1])}\n"
      f"Best model file: {best[2]}\n"
      f"Best model training time: {human.humantime(best[3])}\n"
      f"Positive training samples: {best[5]:.0f}\n"
      f"Negative training samples: {best[6]:.0f}\n"
      f"Best model training parameters: {json.dumps(best[4],indent=2,sort_keys=True)}\n"
   )

if __name__ == "__main__":
   logging.basicConfig(level=logging.INFO, format="%(message)s")
   args = arguments()
   main(args)

